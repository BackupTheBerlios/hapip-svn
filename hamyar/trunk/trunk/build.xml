<project name="pmis" default="deploy" basedir=".">


<!-- ========== Prerequisite Properties =================================== -->

<!--
	These properties MUST be set on the "ant" command line, a
	"build.properties" file in the base directory, or a
	"build.properties" file in your user home directory.
	or from settings in a superior build.xml script, if you wish to take
	advantage of the corresponding functionality.

	compile.classpath		The class path containing external
							JAR files and directories required for
							compiling this web application.  Note
							that struts.jar will automatically be
							added if "struts.lib" is defined, and
							dependent JAR files will be added if
							"webapp.libs" is defined.

	build.home				Base directory into which we are building
							the Struts components.


	webapp.libs				If specified, must be the pathname of a
							directory from which all available
							"*.jar" files are copied to the web
							application's WEB-INF/lib directory.
							Also, any JAR files found here will
							automatically be added to your compile
							classpath.

	webapp.name				MUST be set to the base name of the web
							application archive file that will be
							created for this web application.

	webapp.suppress			Set this property to an arbitrary value
							(such as "true") if you do NOT want the
							source code for your web application
							copied to the WEB-INF/src directory.

	webapp.war				If specified, overrides the default name
							of the web application archive file to be
							created for this webapp.  Default value
							is "struts-${webapp.name}.war".

-->

<!-- Load local and user build preferences -->
<property file="build.properties"/>

<property name="build.home"  value="dist" />



<!-- ========== Initialization Properties ================================= -->


<!--
	These property values may optionally be overridden with property
	settings from an "ant" command line, the "antrc" properties file
	in your home directory, or from settings in a superior build.xml
	script.
-->



<!-- Should Java compilations set the debug compiler option? -->
<property name="compile.debug"         value="true" />

<!-- Should Java compilations set the deprecation compiler option? -->
<property name="compile.deprecation"   value="false" />

<!-- Should Java compilations set the optimize compiler option? -->
<property name="compile.optimize"      value="false" />

<!-- The base directory for distribution targets -->
<property name="dist.home"      value="dist" />

<!-- The source directory the whole project -->
<property name="src"     		value="src" />

<!-- The source directory the whole project -->
<property name="web"     		value="WebRoot" />

<!-- The version number of this particular web application -->
<property name="webapp.version" value="1.0" />

<!-- The name of the web application archive file to be produced -->
<property name="webapp.war"     value="${webapp.name}.war" />

<!-- The source directory for copying static web resources and files -->
<property name="webapp.web"     value="WebRoot/resource" />

<!-- tar settings default. These are used in dist.src target -->
<property name="tar.user"		value="ant"/>
<property name="tar.group"		value="ant"/>
<property name="tar.mode"		value="644"/>

<!-- ========== Derived Properties ======================================== -->


<!--
		These property values are derived from values defined above, and
		generally should NOT be overridden by command line settings
-->

<!-- The source directory for Java compilations related to this webapp -->
<property name="webapp.src"     value="${src}" />

<!-- The web directory for Java compilations related to this webapp -->
<property name="webapp.web"     value="${web}" />

<!-- The target directory for building the packed web application -->
<property name="webapp.dist"    value="${dist.home}/webapps" />

<!-- The target directory for building the unpacked web application -->
<property name="webapp.target"  value="${build.home}/${webapp.name}" />

<!-- The class path used for compiling this library -->
<path id="classpath">
    <fileset dir="${web}/WEB-INF/lib/">
                        <include name="**/*.jar"/>
                </fileset>


</path>


<!-- ========== Executable Targets ======================================== -->


<target name="resources.missing" unless="webapp.name">
	<fail message="missing build.properties file in current directory or in ${user.home}"/>
</target>

<!--
        The "init" target evaluates "available" expressions as necessary
        to modify the behavior of this script.
-->
<target name="init" depends="resources.missing">

	<tstamp/>
	<echo    message="Processing webapp ${webapp.name}"/>

	<!-- Do we need to copy dependent libraries? -->
	<available property="copy.libs"        file="${webapp.libs}" />

	<!-- Do we need to compile the Java sources for this web application? -->
	<available property="webapp.compile"   file="${webapp.src}" />

	<!-- used to print out the classpath in an echo statement -->
	<property name="print.classpath" refid="classpath"/>

	<mkdir dir="${build.home}"/>
	<mkdir dir="${dist.home}"/>
</target>


<!--
        The "prepare" target creates a directory structure in the build target
        area for the unpacked files associated with this web application
-->
<target name="prepare" depends="init"
        description="Prepare target directory">
	<echo    message="Processing webapp ${webapp.name}"/>
	<mkdir   dir="${webapp.target}" />
	<mkdir   dir="${webapp.target}/WEB-INF" />
	<mkdir   dir="${webapp.target}/WEB-INF/classes" />
	<mkdir   dir="${webapp.dist}" />
</target>


<!--
        The "libs" target copies specified library JAR files (if any) from the
        "${webapp.libs} directory into the WEB-INF/lib directory of this app.
-->

<target name="libs" depends="prepare" if="copy.libs"
        description="Copy dependent libraries">
	<echo    message="Processing webapp ${webapp.name}"/>
	<echo message="Copying jars from ${webapp.libs} to ${webapp.target}/WEB-INF/lib"/>
	<mkdir   dir="${webapp.target}/WEB-INF/lib" />
	<copy  todir="${webapp.target}/WEB-INF/lib">
		<fileset dir="${webapp.libs}" includes="*.jar"/>
	</copy>
</target>


<!--
		The "source" target copies the Java source code of your web application
		into the build target area, IF AND ONLY IF the "webapp.source"
		property has been set to an arbitrary value.
-->

<target name="source" depends="prepare" if="webapp.source"
		unless="webapp.suppress"
		description="Copy Java sources">
  <echo message="Processing webapp ${webapp.name}"/>
  <mkdir dir="${webapp.target}/WEB-INF/src"/>
  <copy todir="${webapp.target}/WEB-INF/src">
    <fileset dir="${webapp.src}"/>
  </copy>


</target>
    <target name="">
    <copydir src="${web}/WEB-INF/" dest="${webapp.target}/WEB-INF" />
    <copy  todir="${webapp.target}/WEB-INF">
	<fileset dir="${web}/WEB-INF">
		<exclude name="web.xml"/>
		<include name="*.dtd"/>
		<include name="*.xml"/>
	</fileset>
  </copy>
    <copydir src="${web}/jsp" dest="${webapp.target}"/>
</target>


<!--
        The "static" target copies the static web resources portion of your
        web application source into the build target area.
-->
<target name="static" depends="prepare,source,libs,struts"
        description="Copy static files">
	<echo    message="Processing webapp ${webapp.name}"/>
	<copy  todir="${webapp.target}">
		<fileset dir="${webapp.web}">
			<include name="*.jsp"/>
			<include name="*.html"/>
			<include name="images/*.*"/>
			<include name="layouts/*.*"/>
			<include name="css/*.*"/>
			<include name="jsp/*.*"/>
            <include name="reportFiles/*.*"/>
            <include name="management/*.*"/>
            <include name="management/charts/*.*"/>
            <include name="xml/*.*" />
            <include name="help/*.*" />


		</fileset>
	</copy>
     <copy todir="${webapp.target}/WEB-INF/classes">
        <fileset dir="${webapp.web}/reportFiles">
         <include name="fonts/*.*" />
        </fileset>
    </copy>
</target>


<!--
        The "compile" target compiles the Java source code of your web
        application, if and only if the specified source directory
        actually exists.
-->
 <target name="compile" depends="static"
            description="(default target) Compile Java sources ">
      <echo    message="Processing webapp ${webapp.name}"/>
      <echo    message="using classpath=${print.classpath}"/>
      <javac  srcdir="${webapp.src}"
             destdir="${webapp.target}/WEB-INF/classes"
               debug="${compile.debug}"
         deprecation="${compile.deprecation}"
            optimize="${compile.optimize}">
        <classpath refid="classpath"/>
      </javac>


  <copy    todir="${webapp.target}/WEB-INF/classes">
    <fileset dir="${webapp.web}/properties">
	  <include name="**/*.properties"/>
    </fileset>
  </copy>


	<native2ascii encoding="UTF-8"  dest="${webapp.target}/WEB-INF/classes/com"
		src="${webapp.src}/com">
		<include name="**/*.properties"/>
	</native2ascii>


	<!--<native2ascii encoding="UTF-8" dest="/home/ab" src="${webapp.src}/com">
		<include name="**/*.properties"/>
	</native2ascii>-->
</target>



<!--
        The "create.war" target creates a web application archive containing
        your completed web application, suitable for deployment on any
        compatible servlet container.
-->
<target name="create.war" depends="compile"
        description="Create web application archive">
  <echo message="Processing webapp ${webapp.name}"/>
  <delete file="${webapp.target}/${webapp.war}"/>
  <war warfile="${webapp.dist}/${webapp.war}"
  		webxml="web/WEB-INF/web.xml"
		basedir="${webapp.target}"
		compress="false">
   <metainf dir="${web}/META-INF" />
	<!--<zipfileset dir="${webapp.target}/images" prefix="images"/>-->
	<!--<zipfileset dir="${webapp.target}/css" prefix="css"/>-->
  </war>
  <echo message="Created ${webapp.target}/${webapp.war}"/>
</target>

<!--
        The "deploy" target deploys the web application in the in the non-war
        format.
-->
<target name="deploy" depends="compile"
		description="deploy web application to servlet container's deployment dir">
	<echo message="Deploying web application to ${deploy.home}/${webapp.name}"/>
	<copydir dest="${deploy.home}/${webapp.name}" src="${webapp.target}"/>

	<copy todir="${deploy.home}/${webapp.name}/WEB-INF"
		file="web/WEB-INF/web.xml" overwrite="yes"/>

</target>

<!--
        The "deploy.war" target creates a web application archive containing
        your completed web application, suitable for deployment on any
        compatible servlet container.
-->
<target name="deploy.war" depends="create.war"
        description="deploy war file to servlet container's deployment dir">
	<echo    message="Deploying war file to ${deploy.home}/${webapp.war}"/>
	<copy  todir="${deploy.home}" file="${webapp.dist}/${webapp.war}"/>
</target>

<!--
        The "undeploy" target deletes the web application archive
        and the web application directory in the compatible servlet container.
-->
<target name="undeploy" depends="init"
        description="undeploy war file to servlet container's deployment dir">
  <echo    message="Undeploying war file in ${deploy.home}/${webapp.war}"/>
  <delete  file="${deploy.home}/${webapp.war}"/>
  <delete  dir="${deploy.home}/${webapp.name}"/>
</target>

<!--
        The "clean" task deletes any created directories that have resulted
        from running any of the other targets in this script.
-->

<target name="clean"
        description="Clean build and distribution directories">
	<echo    message="Processing webapp ${webapp.name}"/>
	<delete dir="${webapp.dist}" />
	<delete dir="${webapp.target}" />
	<delete file="${webapp.dist}/${webapp.war}"/>
	<delete dir="${build.home}"/>
	<delete dir="${dist.home}"/>
</target>

<!--
		Creates src distribution
-->
<target name="dist.src" depends="init"
		description="create zip and tar.gz of src for distribution">

	<property name="archive.name"
		value="${webapp.name}-${webapp.version}-${DSTAMP}"/>

	<property name="archive.target"
		value="${dist.home}/${archive.name}"/>

	<zip zipfile="${archive.target}.zip">
		<fileset dir="${basedir}">
			<patternset id="srcfiles">
				<include name="*.xml"/>
				<include name="build.properties"/>
				<include name=".cvsignore"/>
				<include name="${src}/**"/>
				<include name="${webapp.web}/**"/>
				<exclude name="${dist}/**"/>
				<exclude name="${build}/**"/>
			</patternset>
		</fileset>
	</zip>
	<tar tarfile="${archive.target}.tar">
		<tarfileset dir="${basedir}" mode="${tar.mode}"
				username="${tar.user}" group="${tar.group}">
			<patternset refid="srcfiles"/>
		</tarfileset>
	</tar>
	<gzip zipfile="${archive.target}.tar.gz" src="${archive.target}.tar"/>
	<delete file="${archive.target}.tar"/>
</target>
</project>
